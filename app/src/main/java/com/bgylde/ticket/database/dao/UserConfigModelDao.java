package com.bgylde.ticket.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bgylde.ticket.database.StringConverter;
import java.util.List;

import com.bgylde.ticket.database.UserConfigModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserConfigTable".
*/
public class UserConfigModelDao extends AbstractDao<UserConfigModel, Long> {

    public static final String TABLENAME = "UserConfigTable";

    /**
     * Properties of entity UserConfigModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ConfigId = new Property(0, long.class, "configId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "accountUser");
        public final static Property UserPasswd = new Property(2, String.class, "userPasswd", false, "accountPwd");
        public final static Property FromStation = new Property(3, String.class, "fromStation", false, "FROM_STATION");
        public final static Property ToStation = new Property(4, String.class, "toStation", false, "TO_STATION");
        public final static Property StationDate = new Property(5, String.class, "stationDate", false, "STATION_DATE");
        public final static Property TrainCodeList = new Property(6, String.class, "trainCodeList", false, "TRAIN_CODE_LIST");
    }

    private DaoSession daoSession;

    private final StringConverter stationDateConverter = new StringConverter();
    private final StringConverter trainCodeListConverter = new StringConverter();

    public UserConfigModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserConfigModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserConfigTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: configId
                "\"accountUser\" TEXT," + // 1: userName
                "\"accountPwd\" TEXT," + // 2: userPasswd
                "\"FROM_STATION\" TEXT NOT NULL ," + // 3: fromStation
                "\"TO_STATION\" TEXT NOT NULL ," + // 4: toStation
                "\"STATION_DATE\" TEXT," + // 5: stationDate
                "\"TRAIN_CODE_LIST\" TEXT);"); // 6: trainCodeList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserConfigTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserConfigModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConfigId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPasswd = entity.getUserPasswd();
        if (userPasswd != null) {
            stmt.bindString(3, userPasswd);
        }
        stmt.bindString(4, entity.getFromStation());
        stmt.bindString(5, entity.getToStation());
 
        List stationDate = entity.getStationDate();
        if (stationDate != null) {
            stmt.bindString(6, stationDateConverter.convertToDatabaseValue(stationDate));
        }
 
        List trainCodeList = entity.getTrainCodeList();
        if (trainCodeList != null) {
            stmt.bindString(7, trainCodeListConverter.convertToDatabaseValue(trainCodeList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserConfigModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConfigId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPasswd = entity.getUserPasswd();
        if (userPasswd != null) {
            stmt.bindString(3, userPasswd);
        }
        stmt.bindString(4, entity.getFromStation());
        stmt.bindString(5, entity.getToStation());
 
        List stationDate = entity.getStationDate();
        if (stationDate != null) {
            stmt.bindString(6, stationDateConverter.convertToDatabaseValue(stationDate));
        }
 
        List trainCodeList = entity.getTrainCodeList();
        if (trainCodeList != null) {
            stmt.bindString(7, trainCodeListConverter.convertToDatabaseValue(trainCodeList));
        }
    }

    @Override
    protected final void attachEntity(UserConfigModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserConfigModel readEntity(Cursor cursor, int offset) {
        UserConfigModel entity = new UserConfigModel( //
            cursor.getLong(offset + 0), // configId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPasswd
            cursor.getString(offset + 3), // fromStation
            cursor.getString(offset + 4), // toStation
            cursor.isNull(offset + 5) ? null : stationDateConverter.convertToEntityProperty(cursor.getString(offset + 5)), // stationDate
            cursor.isNull(offset + 6) ? null : trainCodeListConverter.convertToEntityProperty(cursor.getString(offset + 6)) // trainCodeList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserConfigModel entity, int offset) {
        entity.setConfigId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPasswd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromStation(cursor.getString(offset + 3));
        entity.setToStation(cursor.getString(offset + 4));
        entity.setStationDate(cursor.isNull(offset + 5) ? null : stationDateConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setTrainCodeList(cursor.isNull(offset + 6) ? null : trainCodeListConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserConfigModel entity, long rowId) {
        entity.setConfigId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserConfigModel entity) {
        if(entity != null) {
            return entity.getConfigId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserConfigModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
