package com.bgylde.ticket.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bgylde.ticket.database.StationInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "StationTable".
*/
public class StationInfoModelDao extends AbstractDao<StationInfoModel, Long> {

    public static final String TABLENAME = "StationTable";

    /**
     * Properties of entity StationInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StationId = new Property(0, Long.class, "stationId", true, "_id");
        public final static Property StationName = new Property(1, String.class, "stationName", false, "STATION_NAME");
        public final static Property StationFlag = new Property(2, String.class, "stationFlag", false, "STATION_FLAG");
    }

    private DaoSession daoSession;


    public StationInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public StationInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"StationTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: stationId
                "\"STATION_NAME\" TEXT," + // 1: stationName
                "\"STATION_FLAG\" TEXT);"); // 2: stationFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"StationTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationInfoModel entity) {
        stmt.clearBindings();
 
        Long stationId = entity.getStationId();
        if (stationId != null) {
            stmt.bindLong(1, stationId);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(2, stationName);
        }
 
        String stationFlag = entity.getStationFlag();
        if (stationFlag != null) {
            stmt.bindString(3, stationFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationInfoModel entity) {
        stmt.clearBindings();
 
        Long stationId = entity.getStationId();
        if (stationId != null) {
            stmt.bindLong(1, stationId);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(2, stationName);
        }
 
        String stationFlag = entity.getStationFlag();
        if (stationFlag != null) {
            stmt.bindString(3, stationFlag);
        }
    }

    @Override
    protected final void attachEntity(StationInfoModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StationInfoModel readEntity(Cursor cursor, int offset) {
        StationInfoModel entity = new StationInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // stationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stationName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // stationFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationInfoModel entity, int offset) {
        entity.setStationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStationName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StationInfoModel entity, long rowId) {
        entity.setStationId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StationInfoModel entity) {
        if(entity != null) {
            return entity.getStationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StationInfoModel entity) {
        return entity.getStationId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
