package com.bgylde.ticket.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bgylde.ticket.database.OrderModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OrderTable".
*/
public class OrderModelDao extends AbstractDao<OrderModel, Long> {

    public static final String TABLENAME = "OrderTable";

    /**
     * Properties of entity OrderModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, long.class, "orderId", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property TrainCode = new Property(2, String.class, "trainCode", false, "TRAIN_CODE");
        public final static Property FromStation = new Property(3, String.class, "fromStation", false, "FROM_STATION");
        public final static Property ToStation = new Property(4, String.class, "toStation", false, "TO_STATION");
    }

    private DaoSession daoSession;


    public OrderModelDao(DaoConfig config) {
        super(config);
    }
    
    public OrderModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OrderTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: orderId
                "\"DATE\" TEXT NOT NULL ," + // 1: date
                "\"TRAIN_CODE\" TEXT NOT NULL ," + // 2: trainCode
                "\"FROM_STATION\" TEXT NOT NULL ," + // 3: fromStation
                "\"TO_STATION\" TEXT NOT NULL );"); // 4: toStation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OrderTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOrderId());
        stmt.bindString(2, entity.getDate());
        stmt.bindString(3, entity.getTrainCode());
        stmt.bindString(4, entity.getFromStation());
        stmt.bindString(5, entity.getToStation());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOrderId());
        stmt.bindString(2, entity.getDate());
        stmt.bindString(3, entity.getTrainCode());
        stmt.bindString(4, entity.getFromStation());
        stmt.bindString(5, entity.getToStation());
    }

    @Override
    protected final void attachEntity(OrderModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public OrderModel readEntity(Cursor cursor, int offset) {
        OrderModel entity = new OrderModel( //
            cursor.getLong(offset + 0), // orderId
            cursor.getString(offset + 1), // date
            cursor.getString(offset + 2), // trainCode
            cursor.getString(offset + 3), // fromStation
            cursor.getString(offset + 4) // toStation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderModel entity, int offset) {
        entity.setOrderId(cursor.getLong(offset + 0));
        entity.setDate(cursor.getString(offset + 1));
        entity.setTrainCode(cursor.getString(offset + 2));
        entity.setFromStation(cursor.getString(offset + 3));
        entity.setToStation(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderModel entity, long rowId) {
        entity.setOrderId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderModel entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
