package com.bgylde.ticket.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bgylde.ticket.database.CookieModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CookieTable".
*/
public class CookieModelDao extends AbstractDao<CookieModel, Long> {

    public static final String TABLENAME = "CookieTable";

    /**
     * Properties of entity CookieModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CookieId = new Property(0, long.class, "cookieId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Cookie = new Property(2, String.class, "cookie", false, "cookie");
    }

    private DaoSession daoSession;


    public CookieModelDao(DaoConfig config) {
        super(config);
    }
    
    public CookieModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CookieTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: cookieId
                "\"title\" TEXT," + // 1: title
                "\"cookie\" TEXT);"); // 2: cookie
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CookieTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CookieModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCookieId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String cookie = entity.getCookie();
        if (cookie != null) {
            stmt.bindString(3, cookie);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CookieModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCookieId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String cookie = entity.getCookie();
        if (cookie != null) {
            stmt.bindString(3, cookie);
        }
    }

    @Override
    protected final void attachEntity(CookieModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CookieModel readEntity(Cursor cursor, int offset) {
        CookieModel entity = new CookieModel( //
            cursor.getLong(offset + 0), // cookieId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cookie
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CookieModel entity, int offset) {
        entity.setCookieId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCookie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CookieModel entity, long rowId) {
        entity.setCookieId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CookieModel entity) {
        if(entity != null) {
            return entity.getCookieId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CookieModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
